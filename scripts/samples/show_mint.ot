#! /usr/local/bin/ot --script

use("../ot/ot_utility.ot")
use("../ot/otapi.ot")
use("../ot/ot_made_easy.ot")
// Instantiate the "OT Made Easy" object.
//
var madeEasy	= OT_ME()
// ------------------------------
// SHOW MINT
// 
// (Load a public mint from local storage and display it on the screen.
// If necessary, download it from the server.)
//
{	
	// Just to show how easy it is now, let's load up a mint and display it.
	// If this function is unable to load it, it will download the mint from
	// the server.
	//
	var strMint	= madeEasy.load_or_retrieve_mint(Server, MyNym, MyPurse) // <=====

	// NOTICE -- there's no need here to deal with retries, timeouts, request number, synching 
	// transaction number, download / process nymbox, etc! It's all handled interally.
	//
	// Simply "verify" the return value:
	//
	if (!VerifyStringVal(strMint))
	{
		OT_API_Output(0, "show_mint: Failed.\n")
	}
	else	// Success!
	{
		OT_API_Output(0, "\n\n")
		OT_API_Output(0, strMint)
		OT_API_Output(0, "\n\n")
	}
}

// Done!

	





//
// NOTE:  
// FOR EDUCATIONAL PURPOSES ONLY, here is the actual code for 
// the "load_or_retrieve_mint()" function (used above):
//
//
// From the file:  Open-Transactions/scripts/ot/ot_made_easy.ot
//
/*
// -----------------------------------------------------------------------------------------------
	// DOWNLOAD PUBLIC MINT (from server)
	//
    def OT_ME::retrieve_mint(SERVER_ID, NYM_ID, ASSET_ID) 
	{
		var ot_Msg := OTAPI_Func();
		// -------------------------
		var theRequest := OTAPI_Func(ot_Msg.GET_MINT, SERVER_ID, NYM_ID, ASSET_ID);
		var	strResponse = theRequest.SendRequest(theRequest, "GET_MINT");

		return strResponse;
    }
	// --------------------------------------------------------------
	// LOAD MINT (from local storage)
	//
	// To load a mint withOUT retrieving it from server, call:
	//
	// var strMint = OT_API_LoadMint(SERVER_ID, ASSET_ID);
	// It returns the mint, or null.
	// --------------------------------------------------------------
	// LOAD MINT (from local storage).
	// ==> Also, if necessary, RETRIEVE it from the server first.
	//
	// Returns the mint, or null.
	
    def OT_ME::load_or_retrieve_mint(SERVER_ID, NYM_ID, ASSET_ID) 
	{
		var strMint		= OT_API_LoadMint(SERVER_ID, ASSET_ID);
		
		if (!VerifyStringVal(strMint))
		{
			OT_API_Output(1, "OT_ME::load_or_retrieve_mint: Mint file isn't already there. Downloading from server...\n");

			var strResponse	= this.retrieve_mint(SERVER_ID, NYM_ID, ASSET_ID);
			
			if (!VerifyStringVal(strResponse))
			{
				OT_API_Output(0, "OT_ME::load_or_retrieve_mint: Unable to load or retrieve mint for IDs: \n");
				OT_API_Output(0, concat("Server ID: ", SERVER_ID));	OT_API_Output(0,"\n");
				OT_API_Output(0, concat(" Asset ID: ", ASSET_ID));	OT_API_Output(0,"\n");
				return strResponse; // basically this means "return null".			
			}
			strMint = OT_API_LoadMint(SERVER_ID, ASSET_ID);
		}
		
		if (!VerifyStringVal(strMint))
		{
			OT_API_Output(0, "OT_ME::load_or_retrieve_mint: Unable to load mint for IDs: \n");
			OT_API_Output(0, concat("Server ID: ", SERVER_ID));	OT_API_Output(0,"\n");
			OT_API_Output(0, concat(" Asset ID: ", ASSET_ID));	OT_API_Output(0,"\n");
		}
		
		return strMint;
	}
	// ---------------------------
*/