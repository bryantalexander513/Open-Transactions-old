#!/usr/bin/env ot

/*
 call OT_API_LoadInbox() to load the inbox ledger from local storage.
 
 During this time, your user has the opportunity to peruse the inbox, and to decide which transactions therein he wishes to accept or reject. Usually the inbox is display on the screen, then the user selects various items to accept or reject, and then the user clicks “Process Inbox” and then you do this:
 Then call OT_API_Ledger_CreateResponse() in order to create a ‘response’ ledger for that inbox, which will be sent to the server to signal your responses to the various inbox transactions.
 Then call OT_API_Ledger_GetCount() (pass it the inbox) to find out how many transactions are inside of it. Use that count to LOOP through them…
 Use OT_API_Ledger_GetTransactionByIndex() to grab each transaction as you iterate through the inbox. (There are various introspection functions you can use in the API here if you wish to display the inbox items on the screen for the user…) 
 Next call OT_API_Transaction_CreateResponse() for each transaction in the inbox, to create a response to it, accepting or rejecting it. This function creates the response and adds it to the response ledger.
 Next, call OT_API_Ledger_FinalizeResponse() which will create a Balance Agreement for the ledger.
 Finally, call OT_API_processInbox() to send your message to the server and process the various items.
 
 If the message was successful, then use OT_API_Message_GetBalanceAgreementSuccess() and OT_API_Message_GetTransactionSuccess() as described above in the deposit cash instructions.
 */
// --------------------------------------------------------------------
// Instantiate the "OT Made Easy" object.
//
var madeEasy	= OT_ME()
// ------------------------------
// SHOW INBOX
// 
// (Load an asset account's inbox from local storage and display it on the screen.
// If necessary, download it from the server.)
//



if (VerifyExists("Server") && VerifyExists("MyNym") && VerifyExists("MyAcct"))
{	
    
    var strInbox = OT_API_LoadInbox(Server, MyNym, MyAcct); // Returns NULL, or an inbox.

	// There's no need here to deal with retries, timeouts, request number, synching 
	// transaction number, download / process nymbox, etc! It's all handled interally.
	//
	// Simply "verify" the return value:
	//
	if (!VerifyStringVal(strInbox))
	{
		OT_API_Output(0, "\n\n OT_API_LoadInbox: Failed.\n\n")
        return 0
	}
	else	// Success!
	{
		OT_API_Output(0, "\n\n") // stderr
//		print(strInbox)          // stdout
        
        var nCount = OT_API_Ledger_GetCount(Server, MyNym, MyAcct, strInbox)

        if (VerifyIntVal(nCount))
        {
            OT_API_Output(0, "Ind  Amt  Type        Txn# InRef#|User / Acct\n")
            OT_API_Output(0, "---------------------------------|(from or to)\n")

            for (var nIndex = 0; nIndex < nCount; ++nIndex)
            {
                var strTrans           = OT_API_Ledger_GetTransactionByIndex(Server, MyNym, MyAcct, strInbox, nIndex)
                var strTransID         = OT_API_Ledger_GetTransactionIDByIndex(Server, MyNym, MyAcct, strInbox, nIndex)
                var strRefNum          = OT_API_Transaction_GetDisplayReferenceToNum(Server, MyNym, MyAcct, strTrans)
                var strAmount          = OT_API_Transaction_GetAmount(Server, MyNym, MyAcct, strTrans)
                var strType            = OT_API_Transaction_GetType(Server, MyNym, MyAcct, strTrans)
                var strSenderUserID    = OT_API_Transaction_GetSenderUserID(Server, MyNym, MyAcct, strTrans)
                var strSenderAcctID    = OT_API_Transaction_GetSenderAcctID(Server, MyNym, MyAcct, strTrans)
                var strRecipientUserID = OT_API_Transaction_GetRecipientUserID(Server, MyNym, MyAcct, strTrans)
                var strRecipientAcctID = OT_API_Transaction_GetRecipientAcctID(Server, MyNym, MyAcct, strTrans)

                var strUserID = VerifyStringVal(strSenderUserID) ? strSenderUserID : strRecipientUserID;
                var strAcctID = VerifyStringVal(strSenderAcctID) ? strSenderAcctID : strRecipientAcctID;

                var bUserIDExists = VerifyStringVal(strUserID)
                var bAcctIDExists = VerifyStringVal(strAcctID)
                
                var strNewlineSeparator = ""
                
                if (bUserIDExists || bAcctIDExists)
                {  strNewlineSeparator = "\n                                 |" }
                
                var strSeparator = (!bUserIDExists && !bAcctIDExists) ? "" : strNewlineSeparator;
                
                var strUserDenoter = (bUserIDExists ? "U:" : "")
                var strAcctDenoter = (bAcctIDExists ? "A:" : "")
                
                OT_API_Output(0, nIndex.to_string() + "    ")
                OT_API_Output(0, strAmount + (strAmount.size() < 3 ? "    " : "   "))
                OT_API_Output(0, strType)
                OT_API_Output(0, strType.size() > 10 ? " " : "    ")
                OT_API_Output(0, strTransID + (strTransID.size() < 2 ? "    " : "   "))
                OT_API_Output(0, strRefNum + (strRefNum.size() > 2 ? "  " : " ") + "|")
                OT_API_Output(0, strUserDenoter+strUserID + strSeparator + strAcctDenoter+strAcctID + "\n")
            } // for
        } // VerifyIntVal (nCount)
        
		OT_API_Output(0, "\n\n") // stderr
        return 1
	}
}

// Done!
0













