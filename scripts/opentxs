#!/usr/bin/env ot

// ---------------------------------


def main_not_coded_yet()
{
    print("\n\n  Congratulations, you've been selected to add that option to this script! \n It's real easy: just edit scripts/ot/ot_commands.ot, and copy some code\ninto it based on whichever sample script is appropriate.\nThen edit the opentxs script, and add your new main\nfunction to the list map_functions near the bottom. Done!\n\n")
}


// ---------------------------------

def interpret_command(map_functions, strInput)
{
    var the_function
    
    if (VerifyStringVal(strInput))
    {
        if ("quit" == strInput)
        {
            return 1
        }
        // -----------------------------
        else if ("help" == strInput || "list" == strInput)
        {
            OT_API_Output(0, "\nCommands: \n\n")
            // -----------------------------
            var help_range = map_functions.range()
            // -----------------------------
            var nHelpCount = 0
            
            while (!help_range.empty())
            {
                ++nHelpCount
                
                var help_tuple   = help_range.front()
                var help_command = help_tuple.first()
                
                if (0 == (nHelpCount%4)) // 4 rows
                {
                    OT_API_Output(0, help_command+"\n")
                }
                else
                {
                    OT_API_Output(0, help_command+(help_command.size() > 7 ? "\t" : "\t\t"))
                }
                help_range.pop_front()
            }
            OT_API_Output(0, "\n\n")
            
            return 1
        }
        // -----------------------------------------
        else // all other comands.
        {
            var the_range = map_functions.range()
            // -----------------------------
            while (!the_range.empty())
            {
                var the_tuple = the_range.front()
                if (strInput == the_tuple.first())
                {
                    the_function = the_tuple.second()
                    break
                }
                the_range.pop_front()
            }
            // -----------------------------------------
            
            if (!the_function.is_var_undef()) // found it!
            {
                return the_function()
            }
            else
            {
                OT_API_Output(0, "Undefined command: \"" + strInput + "\" -- Try 'list'.\n\n")
            }
        }
    }
    
    (-1)
}

// ---------------------------------


def main_loop(map_functions)
{
    // ---------------------------------
    // See if the command was passed in on the command line.
    //
    if (VerifyExists("Args"))
    {
        var strCommand = OT_CLI_GetValueByKey(Args, "ot_cli_command")
        
        if (VerifyStringVal(strCommand)) // command was passed in on the command line...
        {
            return interpret_command(map_functions, strCommand)
        }
    }

    // ---------------------------------
    //
    // Otherwise, drop into the OT high-level prompt.
    //
    else
    {
        OT_API_Output(0, ".\n..\n...\n....\n.....\n\n")

        while(true)
        {
            OT_API_Output(0, "opentxs> ")
            var strInput =  OT_CLI_ReadLine()
            var bDisplayGap = true

            interpret_command(map_functions, strInput)
            
            if (bDisplayGap)
            {
                OT_API_Output(0, ".\n..\n...\n....\n.....\n\n")
            }
        } // while
    }
    
    1
}


// ---------------------------------

// Start and finish.
//
def main_opentxs()
{    
    // Note: ADDING NEW COMMANDS IS **VERY** EASY!!
    // Just add the command to the list below, and
    // then edit the ot/ot_commands.ot file to add
    // the implementation for your main function!
    
    var map_functions = ["sendmsg":main_sendmsg,                // send a message to another nym's in-mail.
                         "stat":main_stat,                      // display wallet contents.
                         "checknym":main_not_coded_yet,         // download a nym's public key based on his ID.
                         "cheque":main_not_coded_yet,           // write a cheque.
                         "voucher":main_not_coded_yet,          // withdraw a voucher (cashier's cheque).
                         "withdraw":main_not_coded_yet,         // withdraw cash
                         "deposit":main_not_coded_yet,          // deposit cash, cheque, voucher, or tokens
                         "showacct":main_not_coded_yet,         // show account stats for a single account.
                         "showbaskets":main_not_coded_yet,      // show basket currencies issued on a particular server.
                         "showoffers":main_not_coded_yet,       // show all offers on a particular server and market.
                         "showmyoffers":main_not_coded_yet,     // show mynym's offers on a particular server and market.
                         "sign":main_not_coded_yet,             // sign a contract, releasing all other signatures first.
                         "addsignature":main_not_coded_yet,     // add a signature to a contract without releasing others.
                         "verify":main_not_coded_yet,           // verify a signature on a contract.
                         "activate":main_not_coded_yet,         // activate a smart contract or payment plan.
                         "confirm":main_not_coded_yet,          // confirm a smart contract or payment plan.
                         "inbox":main_not_coded_yet,            // display inbox of a particular account.
                         "outbox":main_not_coded_yet,           // display outbox of a particular account.
                         "inmail":main_not_coded_yet,           // display in-mail for a particular nym.
                         "outmail":main_not_coded_yet,          // display out-mail for a particular nym.
                         "delinmail":main_not_coded_yet,        // delete an in-mail item
                         "deloutmail":main_not_coded_yet,       // delete an out-mail item
                         "balance":main_not_coded_yet,          // display balance for a specific account.
                         "newkey":main_not_coded_yet,           // create a new symmetric key.
                         "pass_encrypt":main_password_encrypt,  // password-encrypt a plaintext using a symmetric key.
                         "pass_decrypt":main_password_decrypt,  // password-decrypt a ciphertext using a symmetric key.
                         "newnym":main_create_nym,              // create a new nym.
                         "issueasset":main_not_coded_yet,       // issue a currency contract onto an OT server.
                         "newacct":main_not_coded_yet,          // create a new asset account.
                         "newoffer":main_not_coded_yet,         // create a new market offer.
                         "newbasket":main_not_coded_yet,        // create a new basket currency.
                         "exchange":main_not_coded_yet,         // exchange in/out of a basket currency.
                         "trigger":main_not_coded_yet,          // trigger a clause on a running smart contract.
                         "discard":main_not_coded_yet,          // discard/cancel a not-yet-cashed, outgoing instrument.
                         "cancel":main_not_coded_yet,           // cancel a still-running, recurring transaction.
                         "transfer":main_transfer,              // send a transfer from myacct to hisacct.
                         "acceptall":main_not_coded_yet,        // accept all receipts in myacct's inbox.
                         "payments":main_not_coded_yet,         // display contents of payments box.
                         "records":main_not_coded_yet,          // display contents of record box.
                         "encode":main_encode,                  // OT-base64-encode into armor.
                         "decode":main_decode,                  // OT-base64-decode out of armor.
                         "encrypt":main_encrypt,                // encrypt plaintext to a nym's public key.
                         "decrypt":main_decrypt];               // decrypt ciphertext using nym's private key.

    
    main_loop(map_functions)
}
    




main_opentxs()
    













