#! /usr/local/bin/ot --script


// THE SIMPLEST POSSIBLE ESCROW:
// Both parties supply two accounts, of matching asset types.
// (If Party One supplies a gold and a dollar account, then Party
// two must ALSO supply a gold and a dollar account. This contract
// allows them to safely trade some gold for some dollars, continuing
// that example, in such a way that both are satisfied or neither.)


// --------------------------------------
// This temp variable is used for a running "latest copy" of the smart contract, as we 
// construct it here inside this client-side OT script. (Don't confuse the server-side
// scripts, aka the smart contracts, with the client-side scripts :-)
//
var strSmartContract = ""


// --------------------------------------

// OT_API_Output() logs to stderr and the logfile, whereas print() actually goes to stdout.
// So we'll put our actual output using print(), so we can pipe it into other scripts. 


var strFirstAssetTypeID = MyPurse
if (MyPurse.size() <= 0)
{
	OT_API_Output(0, "\n\n\nAlice wants to use her \"gold\" (first) to buy some \"wheat\" (second) from Bob. (Or whatever. Any two types will work.)\n")
	OT_API_Output(0, "Paste the FIRST asset type ID (Alice will SPEND this), then hit enter: ")
	strFirstAssetTypeID = OT_CLI_ReadLine()
}

var strSecondAssetTypeID = HisPurse
if (HisPurse.size() <= 0)
{
	OT_API_Output(0, "\n\n\nAlice wants to use her \"gold\" (first) to buy some \"wheat\" (second) from Bob. (Or whatever. Any two types will work.)\n")
	OT_API_Output(0, "Paste the SECOND asset type ID (Alice will RECEIVE this from BOB), then hit enter: ")
	strSecondAssetTypeID = OT_CLI_ReadLine()
}

// ----------------------------------------------------------------------
// These are all functions that will be available to the smart contract itself (on the
// server side--so only the CLAUSES can call these.) 
//
		// ---------------------------------------------------------
		// OT NATIVE FUNCTIONS 
		// (These functions can be called from INSIDE the scripted clauses.)
		//							// Parameters must match as described below. Return value will be as described below.
		//							// -------------------------------------------------------------
//		"set_seconds_until_timer"	// void SetNextProcessTime(String str_seconds_from_now) // if this is <=0, then it sets next process date to 0.
//		"get_remaining_timer"		// std::string GetRemainingTimer() const
/* FYI:
 " 6 minutes	==      360 seconds\n"
 "10 minutes	==      600 seconds\n"
 " 1 hour		==     3600 seconds\n"
 " 1 day		==    86400 seconds\n"
 "30 days		==  2592000 seconds\n"
 " 3 months		==  7776000 seconds\n"
 " 6 months		== 15552000 seconds\n\n" 
 "12 months		== 31104000 seconds\n\n" 
 */
//		"move_funds"				// bool MoveAcctFunds(String from_acct_name, String to_acct_name, String str_Amount); // calls OTCronItem::MoveFunds()

//		"get_acct_balance"			// std::string GetAcctBalance(String acct_name);
//		"get_acct_asset_type_id"	// std::string OTSmartContract::GetAssetTypeIDofAcct(String from_acct_name)

//		"stash_funds"				// bool StashAcctFunds(String from_acct_name, String to_stash_name, String str_Amount); // calls StashFunds()
//		"unstash_funds"				// bool UnstashAcctFunds(String to_acct_name, String from_stash_name, String str_Amount); // calls StashFunds( lAmount * (-1) )
//		"get_stash_balance"			// std::string GetStashBalance(String stash_name, String asset_type_id);

//		"send_notice"				// bool SendNoticeToParty(String party_name);
//		"send_notice_to_parties"	// bool SendANoticeToAllParties();

//		"deactivate_contract"		// void DeactivateSmartContract();

		// ---------------------------------------------------------
		// CALLBACKS 
		// (Called by OT at key moments)
		//
//		"party_may_execute_clause"		// This is a function already on OT server, that it will call when it needs the answer (and that YOUR may call also, whether you provide a script override or not.) Todo: security ramifications?
//		"may_execute_clause"			// This is the name of your clause, as provided in THIS example smart contract. (party_may_execute_clause calls this.)
//		"callback_party_may_execute_clause"   <=== THE CALLBACK WITH THIS NAME must be connected to a script clause (with whatever name you want), and then that clause will trigger when the callback is needed.	
		
//		"party_may_cancel_contract"		// This is a function already on OT server, that it will call when it needs the answer (and that you may call also, since the server has a version of it whether you provide the script or not.) Todo: security ramifications?
//		"may_cancel_contract"			// This is the name of your clause, as provided in THIS example smart contract. (party_may_cancel_contract calls this.)
//		"callback_party_may_cancel_contract"  <=== THE CALLBACK WITH THIS NAME must be connected to a script clause (with whatever name you want), and then that clause will trigger when the callback is needed.
//
		// Callback USAGE:	Your clause, in your smart contract, may have whatever name you want. (Within limits.)
		//					There must be a callback entry in the smart contract, linking your clause the the appropriate callback.
		//					The CALLBACK ENTRY uses the names "callback_party_may_execute_clause" and "callback_party_may_cancel_contract".
		//					If you want to call these from INSIDE YOUR SCRIPT, then use the names "party_may_execute_clause" and "party_may_cancel_contract".
		//
		// ---------------------------------------------------------
		// HOOKS:
		//
		// Hooks are not native calls needing to be registered with the script. (Like the above functions are.)
		// Rather, hooks are SCRIPT CLAUSES, that you have a CHOICE to provide inside your SMART CONTRACT.
		// *IF* you have provided those clauses, then OT *WILL* call them, at the appropriate times. (When
		// specific events occur.) Specifically, Hook entries must be in your smartcontract, linking the below 
		// standard hooks to your clauses.
		//
//	"cron_process"		// Called regularly in OTSmartContract::ProcessCron() based on SMART_CONTRACT_PROCESS_INTERVAL.
//	"cron_activate"		// Done. This is called when the contract is first activated.

// ***************************************************************


// GETTING STARTED...

// Here are the actual scripts (the CLAUSES) that will be attached to this SMART CONTRACT.
// 
// In this case, there's only ONE -- onActivate()



// ------------------------------------------------
// HOOK: CRON ACTIVATE  (The smart contract is being activated for the FIRST TIME, on the server.)
//

// TRY to stash the funds from both sides into a "safe spot" (a "stash" inside the smart contract.)
// If EITHER stash attempt fails, then put the funds BACK, and deactivate.
//
// Else (BOTH successful): unstash to the new owners (SWAP the funds) and we're done. Set bSuccess to true in that case, and deactivate (we're done.)
//
//var strCode_activate_clause = " print(\"Two-way trade (smartcontract): OnActivate(). (from cron_activate hook)\"); \n var str_alice_pays = \"140\"; \n var str_bob_pays = \"100\"; \n var bStashedAlice = stash_funds(alice_first_acct, \"alice_stash\", str_alice_pays); \n var bStashedBob = stash_funds(bob_second_acct, \"bob_stash\", str_bob_pays); \n if (!bStashedAlice || !bStashedBob) {	 if (bStashedAlice) { unstash_funds(alice_first_acct, \"alice_stash\", str_alice_pays); } \n if (bStashedBob)   { unstash_funds(bob_second_acct, \"bob_stash\", str_bob_pays); } deactivate_contract(); } \n else { bSuccess = true; unstash_funds(bob_first_acct, \"alice_stash\", str_alice_pays); \n unstash_funds(alice_second_acct, \"bob_stash\", str_bob_pays); deactivate_contract(); } "

var strCode_activate_clause = ""

print("Paste the SCRIPT code that should trigger when the smart contract is ACTIVATED. Finish with ~ on its own line: ")

strCode_activate_clause = OT_CLI_ReadUntilEOF()

 // **************************
 // --------------------------
 // BEGIN *ACTIVATE* SCRIPT:
/*
 print("SCRIPTED CLAUSE: Two-way trade: This is the clause for the OnActivate() hook. (On a smartcontract.)")
 
 var str_alice_pays	= "140"
 var str_bob_pays	= "100"
 
 var bStashedAlice	= stash_funds(alice_first_acct, "alice_stash", str_alice_pays)
 var bStashedBob	= stash_funds(bob_second_acct,  "bob_stash",   str_bob_pays)
 
 if (!bStashedAlice || !bStashedBob) 
 {
	if (bStashedAlice) 
	{
		var b01 = unstash_funds(alice_first_acct, "alice_stash", str_alice_pays) 
	}
	if (bStashedBob)
	{
		var b02 = unstash_funds(bob_second_acct,  "bob_stash",   str_bob_pays) 
	}	
 }
 else
 {
	var b11 = unstash_funds(bob_first_acct, "alice_stash", str_alice_pays)
	var b12 = unstash_funds(alice_second_acct, "bob_stash", str_bob_pays)

	// This is a variable that was added to the contract before it was signed. 
	// (Not declared inside this script, but above it.)
	bSuccess = true
 }

 deactivate_contract()

*/
// :END SCRIPT
// ---------------------------
 // **************************

/*

LATEST: Looks like the receipt IS there on the server side, and these problems might be more related to bad transaction numbers. (Just not downloading it.)
Plus, server appears to be frozen by this point.... So maybe "frozen server" is the actual problem here, the whole time.



Alice's first acct should be:	-140		ACTUAL: -140 -|- BUT RECEIPT IS MISSING
Bob's first acct should be:		+140		ACTUAL: +140 -|- Receipt is present and correct.

Alice's second acct should be:	+100		ACTUAL: +100 -|- Receipt is present and correct.
Bob's second acct should be:	-100		ACTUAL: -100 -|- Receipt is present and correct.

Conclusion: All balances correct, all receipts wrong.
 Other than the first one, the others all have backwards receipts. 
Therefore fix that first (the remainder could be related to same bug anyway).

*/


//print(strCode_activate_clause)

// --------------------------------------------------

// Just some useful output while running this script:

//print("SMART CONTRACT Server: "	+ Server)
//print("SMART CONTRACT MyNym: "	+ MyNym)
//print("SMART CONTRACT MyAcct: "	+ MyAcct)
//print("SMART CONTRACT MyPurse: "	+ MyPurse)

// ******************************************************************
// CREATE the SMART CONTRACT
//


var strDate1 = "0"
var strDate2 = "0"

var strSmart1 = OT_API_Create_SmartContract(Server, MyNym, strDate1, strDate2)
strSmartContract = strSmart1

// ******************************************************************
// ADD a BYLAW (Clauses, variables, callbacks, and hooks are all attached
// to BYLAWS. FYI, you can add multiple bylaws to each contract.)
//
var strSmart2 = OT_API_SmartContract_AddBylaw(strSmartContract, MyNym, "main_bylaws") // This name "main_bylaws" is used for all API calls related to this Bylaw.

strSmartContract = strSmart2

// ******************************************************************
// ** ADD CLAUSE ** FOR HOOK (ACTIVATION) (for "cron_activate" hook, to trigger a clause named "activate_clause")
//
var strSmart3 = OT_API_SmartContract_AddClause(strSmartContract, MyNym, "main_bylaws",	// Should already be on the contract. (This way we can find it.)
											// ----------------------------------------
											"activate_clause",			// The Clause's name as referenced in the smart contract. (And the scripts...)
											strCode_activate_clause);	// The actual source code for the clause.
strSmartContract = strSmart3

// ******************************************************************
// ** ADD VARIABLE **  (BOOL named btest) 
var strSmart4 = OT_API_SmartContract_AddVariable(strSmartContract, MyNym, "main_bylaws",	// Should already be on the contract. (This way we can find it.)
											  // ----------------------------------------
											  "bSuccess",		// The Variable's NAME as referenced in the smart contract. (And the scripts...)
											  // ----------------------------------------
											  "persistent",	// "constant", "persistent", or "important". Variable access type.
											  "bool",		// "string", "long", or "bool".  Variable data type.
											  "false");		// Contains the initial value.
strSmartContract = strSmart4

// ******************************************************************
// Connect a known HOOK (ACTIVATE aka "cron_activate") to a known CLAUSE aka "activate_clause"
//
var strSmart6 = OT_API_SmartContract_AddHook(strSmartContract, MyNym, "main_bylaws",		// Should already be on the contract. (This way we can find it.)
										  // ----------------------------------------
										  "cron_activate",		// The Hook's name as referenced in the smart contract. (And the scripts...)
										  "activate_clause");	// The actual clause that will be triggered by the hook. (You can call this multiple times, and have multiple clauses trigger on the same hook.)
strSmartContract = strSmart6

// ******************************************************************
// Add a THEORETICAL PARTY to the SMART CONTRACT
//
var strSmart7 = OT_API_SmartContract_AddParty(strSmartContract, MyNym, // Need a signer Nym, so it can save. This is unrelated to the party. Use any Nym.
											"party_alice",		// The Party's NAME as referenced in the smart contract. (And the scripts...)
										   // ----------------------------------------
										   "agent_alice");	// An AGENT will be added by default for this party. Need Agent NAME.
										   // (FYI, that is basically the only option, until I code Entities and Roles. Until then, a party can ONLY be
										   // a Nym, with himself as the agent representing that same party. Nym ID is supplied on ConfirmParty() below.)
strSmartContract = strSmart7

// ----------------------------------------
// Add a THEORETICAL ACCOUNT to the SMART CONTRACT
//
var strSmart8 = OT_API_SmartContract_AddAccount(strSmartContract, MyNym, 
												"party_alice",	// The Party's NAME as referenced in the smart contract. (And the scripts...)
												// ----------------------------------------
												"alice_first_acct",	// The Account's name as referenced in the smart contract
												strFirstAssetTypeID);	// Alice pays Bob out of this account.
strSmartContract = strSmart8

// ----------------------------------------
// Add a THEORETICAL ACCOUNT to the SMART CONTRACT
//
var strSmart8 = OT_API_SmartContract_AddAccount(strSmartContract, MyNym, 
												"party_alice",	// The Party's NAME as referenced in the smart contract. (And the scripts...)
												// ----------------------------------------
												"alice_second_acct",	// The Account's name as referenced in the smart contract
												strSecondAssetTypeID);	// Bob pays Alice into this account.
strSmartContract = strSmart8

// ******************************************************************
// Add a THEORETICAL PARTY to the SMART CONTRACT
//
var strSmart7 = OT_API_SmartContract_AddParty(strSmartContract, MyNym, // Need a signer Nym, so it can save. This is unrelated to the party. Use any Nym.
											"party_bob",		// The Party's NAME as referenced in the smart contract. (And the scripts...)
										   // ----------------------------------------
										   "agent_bob");	// An AGENT will be added by default for this party. Need Agent NAME.
										   // (FYI, that is basically the only option, until I code Entities and Roles. Until then, a party can ONLY be
										   // a Nym, with himself as the agent representing that same party. Nym ID is supplied on ConfirmParty() below.)
strSmartContract = strSmart7

// ----------------------------------------
// Add a THEORETICAL ACCOUNT to the SMART CONTRACT
//
var strSmart8 = OT_API_SmartContract_AddAccount(strSmartContract, MyNym, // Need a signer Nym, so it can save. This is unrelated to the party. Use any Nym.
												"party_bob",	// The Party's NAME as referenced in the smart contract. (And the scripts...)
												// ----------------------------------------
												"bob_first_acct",		// The Account's name as referenced in the smart contract
												strFirstAssetTypeID);	// Alice pays Bob into this account.
strSmartContract = strSmart8

// ----------------------------------------
// Add a THEORETICAL ACCOUNT to the SMART CONTRACT
//
var strSmart8 = OT_API_SmartContract_AddAccount(strSmartContract, MyNym, // Need a signer Nym, so it can save. This is unrelated to the party. Use any Nym.
												"party_bob",	// The Party's NAME as referenced in the smart contract. (And the scripts...)
												// ----------------------------------------
												"bob_second_acct",		// The Account's name as referenced in the smart contract
												strSecondAssetTypeID);	// Bob pays Alice out of this account.
strSmartContract = strSmart8

// ******************************************************************

// OUTPUT THE SMART CONTRACT (So we can redirect to a file, or pipe to another script...)

OT_API_Output(0, "\n\n")

print(strSmartContract)


/*
// ******************************************************************
// TRIGGER A CLAUSE REMOTELY (ON A SMART CONTRACT THAT'S ALREADY BEEN ACTIVATED.)
//
// OT_API_triggerClause(Server, MyNym, const char * TRANSACTION_NUMBER, "typical_clause");

*/





















