#!/usr/bin/env ot

// The goal with this script is to create a GENERIC Escrow smart contract.
// (I.e. like a template, which might be activated over and over again for
// different parties.) This script only creates the template, it doesn't
// add the actual parties or do any activation.
//
// (Those scripts, presumably, must read as their input, the smart contract
// that will be THIS script's OUTPUT...)
//




def details_activate_smart_contract(strContract, strAgent)
{
    // --------------------------------------------------------------------
    // Instantiate the "OT Made Easy" object.
    //
    var madeEasy	= OT_ME()
    
    // ***************************************************************
    
    // HERE, WE SEND THE ACTIVATION REQUEST TO THE SERVER
    //
    var strResponse = madeEasy.activate_smart_contract(Server, MyNym, MyAcct, strAgent, strContract)  // Alice's (my) numbers are harvested here, if it failed.
    var strAttempt  = "activate_smart_contract"
    
    // ***************************************************************
    // HERE, WE INTERPRET THE SERVER REPLY, WHETHER SUCCESS, FAIL, OR ERROR...
    
    var nInterpretReply = InterpretTransactionMsgReply(Server, MyNym, MyAcct, strAttempt, strResponse)
    
    if (1 == nInterpretReply)
    {    
        // Download all the intermediary files (account balance, inbox, outbox, etc)
        // since they have probably changed from this operation.
        //        
        OT_API_Output(0, "Server response ("+strAttempt+"): SUCCESS!\n")
    }
    else // Grab Bob's numbers back (TODO: these false's have to contain real data, to synchronize properly. Long term need to use the actual system here, for tracking and harvesting these numbers, and not this kludge here.
        {
		OT_API_Msg_HarvestTransactionNumbers(strContract, HisNym, false, false, false, false, false) 
	} 
    // ***************************************************************
    //
    // Return status to caller.
    //
    return nInterpretReply  
}






// This temp variable is used for a running "latest copy" of the smart contract, as we 
// construct it here inside this client-side OT script. (Don't confuse the server-side
// scripts, aka the smart contracts, with the client-side scripts :-)
//
var strSmartContract = ""

OT_API_Output(0, "\n\n\nThis script assumes you have already used: sign_trade_as_alice.ot, and sign_trade_as_bob.ot \n")
OT_API_Output(0, "To ACTIVATE the smart contract on the OT Server, paste or pipe the signed smart contract,\nfollowed by a ~ on a line by itself. \n")

strSmartContract = OT_CLI_ReadUntilEOF()


// These are all functions that will be available to the smart contract itself (on the
// server side--so only the actual smart contract clauses can call these.) 
//
		// ---------------------------------------------------------
		// OT NATIVE FUNCTIONS 
		// (These functions can be called from INSIDE the scripted clauses.)
		//							// Parameters must match as described below. Return value will be as described below.
		//							// -------------------------------------------------------------
//		"set_seconds_until_timer"	// void SetNextProcessTime(String str_seconds_from_now) // if this is <=0, then it sets next process date to 0.
//		"get_remaining_timer"		// std::string GetRemainingTimer() const
/*
 " 6 minutes	==      360 seconds\n"
 "10 minutes	==      600 seconds\n"
 " 1 hour		==     3600 seconds\n"
 " 1 day		==    86400 seconds\n"
 "30 days		==  2592000 seconds\n"
 " 3 months		==  7776000 seconds\n"
 " 6 months		== 15552000 seconds\n\n" 
 "12 months		== 31104000 seconds\n\n" 
 */
//		"move_funds"				// bool MoveAcctFunds(String from_acct_name, String to_acct_name, String str_Amount); // calls OTCronItem::MoveFunds()

//		"get_acct_balance"			// std::string GetAcctBalance(String acct_name);
//		"get_acct_asset_type_id"	// std::string OTSmartContract::GetAssetTypeIDofAcct(String from_acct_name)

//		"stash_funds"				// bool StashAcctFunds(String from_acct_name, String to_stash_name, String str_Amount); // calls StashFunds()
//		"unstash_funds"				// bool UnstashAcctFunds(String to_acct_name, String from_stash_name, String str_Amount); // calls StashFunds( lAmount * (-1) )
//		"get_stash_balance"			// std::string GetStashBalance(String stash_name, String asset_type_id);

//		"send_notice"				// bool SendNoticeToParty(String party_name);
//		"send_notice_to_parties"	// bool SendANoticeToAllParties();

//		"deactivate_contract"		// void DeactivateSmartContract();

		// ---------------------------------------------------------
		// CALLBACKS 
		// (Called by OT at key moments)
		//
//		"party_may_execute_clause"		// This is a function already on OT server, that it will call when it needs the answer (and that YOUR may call also, whether you provide a script override or not.) Todo: security ramifications?
//		"may_execute_clause"			// This is the name of your clause, as provided in THIS example smart contract. (party_may_execute_clause calls this.)
//		"callback_party_may_execute_clause"   <=== THE CALLBACK WITH THIS NAME must be connected to a script clause (with whatever name you want), and then that clause will trigger when the callback is needed.	
		
//		"party_may_cancel_contract"		// This is a function already on OT server, that it will call when it needs the answer (and that you may call also, since the server has a version of it whether you provide the script or not.) Todo: security ramifications?
//		"may_cancel_contract"			// This is the name of your clause, as provided in THIS example smart contract. (party_may_cancel_contract calls this.)
//		"callback_party_may_cancel_contract"  <=== THE CALLBACK WITH THIS NAME must be connected to a script clause (with whatever name you want), and then that clause will trigger when the callback is needed.
//
		// Callback USAGE:	Your clause, in your smart contract, may have whatever name you want. (Within limits.)
		//					There must be a callback entry in the smart contract, linking your clause the the appropriate callback.
		//					The CALLBACK ENTRY uses the names "callback_party_may_execute_clause" and "callback_party_may_cancel_contract".
		//					If you want to call these from INSIDE YOUR SCRIPT, then use the names "party_may_execute_clause" and "party_may_cancel_contract".
		//
		// ---------------------------------------------------------
		// HOOKS:
		//
		// Hooks are not native calls needing to be registered with the script. (Like the above functions are.)
		// Rather, hooks are SCRIPT CLAUSES, that you have a CHOICE to provide inside your SMART CONTRACT.
		// *IF* you have provided those clauses, then OT *WILL* call them, at the appropriate times. (When
		// specific events occur.) Specifically, Hook entries must be in your smartcontract, linking the below 
		// standard hooks to your clauses.
		//
//	"cron_process"		// Called regularly in OTSmartContract::ProcessCron() based on SMART_CONTRACT_PROCESS_INTERVAL.
//	"cron_activate"		// Done. This is called when the contract is first activated.





// ***************************************************************

//
// ...WE ACTIVATE THE SMART CONTRACT!
//
print("SMART CONTRACT:  Final version before activation:\n\n\n")
print(strSmartContract)
print("\n\n\n Activating...")



// --------------------------------------------------
// ACTIVATE THE SMART CONTRACT ON A SERVER.




// This is the return value.
//
details_activate_smart_contract(strSmartContract, "agent_alice")




//OT_API_FlushMessageBuffer()
//OT_API_activateSmartContract(Server, MyNym, strSmartContract)
//var strMessage = OT_API_PopMessageBuffer()
//
//print("Finishing calling activate!!")
//
//var bMsgSuccess  = OT_API_Message_GetSuccess(strMessage)
//var bBlncSuccess = OT_API_Msg_GetBlnceAgrmntSuccess(Server, MyNym, MyAcct, strMessage)
//var bTranSuccess = OT_API_Msg_GetTransactionSuccess(Server, MyNym, MyAcct, strMessage)		
//		
//if ((!bMsgSuccess) || (!bBlncSuccess) || (!bTranSuccess))
//{
//	// OTHERWISE, I take the transaction numbers BACK! (Also, if the activation failed,
//	// I'd probably want to take the closing numbers back in that case as well.)
//	print("SMART CONTRACT: Failed somehow, so I'm clawing all the numbers BACK now (that way my data stays good.)")
//	
//	OT_API_HarvestClosingNumbers(Server, MyNym,		strSmartContract);
//	OT_API_HarvestClosingNumbers(Server, HisNym,	strSmartContract);
//}


/*
// ******************************************************************
// TRIGGER A CLAUSE REMOTELY (ON A SMART CONTRACT THAT'S ALREADY BEEN ACTIVATED.)
//
// OT_API_triggerClause(Server, MyNym, const char * TRANSACTION_NUMBER, "typical_clause");

*/





















