#!/usr/bin/env ot



// THE SIMPLEST POSSIBLE ESCROW:
//
// Both parties supply two accounts, of matching asset types.
// (If Party One supplies a gold and a dollar account, then Party
// two must ALSO supply a gold and a dollar account. This contract
// allows them to safely trade some gold for some dollars, continuing
// that example, in such a way that both are satisfied or neither.)


// NOTE: Use create_two_way_trade.ot FIRST, to create your template.
//
// THEN use the signing scripts for activating that template.


// --------------------------------------------------------

// This temp variable is used for a running "latest copy" of the smart contract, as we 
// construct it here inside this client-side OT script. (Don't confuse the server-side
// scripts, aka the smart contracts, with the client-side scripts :-)
//
var strSmartContract = ""

OT_API_Output(0, "\n\n\nThis script assumes you have already used: create_two_way_trade.ot \n")
OT_API_Output(0, "To continue, paste or pipe the smart contract that was created, followed by a ~ on a line by itself. \n")

strSmartContract = OT_CLI_ReadUntilEOF()

// --------------------------------------------------------
// These are all functions that will be available to the smart contract itself (on the
// server side--so only the actual smart contract clauses can call these.) 
//
		// ---------------------------------------------------------
		// OT NATIVE FUNCTIONS 
		// (These functions can be called from INSIDE the scripted clauses.)
		//							// Parameters must match as described below. Return value will be as described below.
		//							// -------------------------------------------------------------
//		"set_seconds_until_timer"	// void SetNextProcessTime(String str_seconds_from_now) // if this is <=0, then it sets next process date to 0.
//		"get_remaining_timer"		// std::string GetRemainingTimer() const
/*
 " 6 minutes	==      360 seconds\n"
 "10 minutes	==      600 seconds\n"
 " 1 hour		==     3600 seconds\n"
 " 1 day		==    86400 seconds\n"
 "30 days		==  2592000 seconds\n"
 " 3 months		==  7776000 seconds\n"
 " 6 months		== 15552000 seconds\n\n" 
 "12 months		== 31104000 seconds\n\n" 
 */
//		"move_funds"				// bool MoveAcctFunds(String from_acct_name, String to_acct_name, String str_Amount); // calls OTCronItem::MoveFunds()

//		"get_acct_balance"			// std::string GetAcctBalance(String acct_name);
//		"get_acct_asset_type_id"	// std::string OTSmartContract::GetAssetTypeIDofAcct(String from_acct_name)

//		"stash_funds"				// bool StashAcctFunds(String from_acct_name, String to_stash_name, String str_Amount); // calls StashFunds()
//		"unstash_funds"				// bool UnstashAcctFunds(String to_acct_name, String from_stash_name, String str_Amount); // calls StashFunds( lAmount * (-1) )
//		"get_stash_balance"			// std::string GetStashBalance(String stash_name, String asset_type_id);

//		"send_notice"				// bool SendNoticeToParty(String party_name);
//		"send_notice_to_parties"	// bool SendANoticeToAllParties();

//		"deactivate_contract"		// void DeactivateSmartContract();

		// ---------------------------------------------------------
		// CALLBACKS 
		// (Called by OT at key moments)
		//
//		"party_may_execute_clause"		// This is a function already on OT server, that it will call when it needs the answer (and that YOUR may call also, whether you provide a script override or not.) Todo: security ramifications?
//		"may_execute_clause"			// This is the name of your clause, as provided in THIS example smart contract. (party_may_execute_clause calls this.)
//		"callback_party_may_execute_clause"   <=== THE CALLBACK WITH THIS NAME must be connected to a script clause (with whatever name you want), and then that clause will trigger when the callback is needed.	
		
//		"party_may_cancel_contract"		// This is a function already on OT server, that it will call when it needs the answer (and that you may call also, since the server has a version of it whether you provide the script or not.) Todo: security ramifications?
//		"may_cancel_contract"			// This is the name of your clause, as provided in THIS example smart contract. (party_may_cancel_contract calls this.)
//		"callback_party_may_cancel_contract"  <=== THE CALLBACK WITH THIS NAME must be connected to a script clause (with whatever name you want), and then that clause will trigger when the callback is needed.
//
		// Callback USAGE:	Your clause, in your smart contract, may have whatever name you want. (Within limits.)
		//					There must be a callback entry in the smart contract, linking your clause the the appropriate callback.
		//					The CALLBACK ENTRY uses the names "callback_party_may_execute_clause" and "callback_party_may_cancel_contract".
		//					If you want to call these from INSIDE YOUR SCRIPT, then use the names "party_may_execute_clause" and "party_may_cancel_contract".
		//
		// ---------------------------------------------------------
		// HOOKS:
		//
		// Hooks are not native calls needing to be registered with the script. (Like the above functions are.)
		// Rather, hooks are SCRIPT CLAUSES, that you have a CHOICE to provide inside your SMART CONTRACT.
		// *IF* you have provided those clauses, then OT *WILL* call them, at the appropriate times. (When
		// specific events occur.) Specifically, Hook entries must be in your smartcontract, linking the below 
		// standard hooks to your clauses.
		//
//	"cron_process"		// Called regularly in OTSmartContract::ProcessCron() based on SMART_CONTRACT_PROCESS_INTERVAL.
//	"cron_activate"		// Done. This is called when the contract is first activated.


// ABOVE COMMENTS ARE ONLY "FYI" ...


// ******************************************************************

// This is where we go from creating a generic template, to actually instantiating the
// contract for specific users in a specific situation!
//

// BY THIS POINT, if we're going to ACTIVATE this up-until-now purely THEORETICAL 
// smart contract, using ACTUAL Nyms and Accounts, then we need to check and see
// if they have enough transaction numbers to move forward!
//
// -----------------------------------------------
//
// We'll start with Alice...

var numCountNymAlice = OT_API_GetNym_TransactionNumCount(Server, MyNym);

// the number of #s needed for "agent_alice" (1 for each acct), plus 1 for the Nym.
var numCountNeededAlice = OT_API_SmartContract_CountNumsNeeded(strSmartContract, "agent_alice") + 1;

var bSuccess = false;

// -----------------------------------------------

if (numCountNymAlice >= numCountNeededAlice)
{
	var strAliceFirstAcctID = MyAcct
	
	if (MyAcct.size() <= 0)
	{
		OT_API_Output(0, "\n\n\nAlice wants to use her \"gold\" (first) to buy some \"wheat\" (second) from Bob. (Or whatever the asset types are on the smartcontract template. They must match.)\n")
		OT_API_Output(0, "Paste Alice's FIRST asset ACCOUNT ID (Alice will SPEND from this account), then hit enter: ")
		strAliceFirstAcctID = OT_CLI_ReadLine()
	}

	OT_API_Output(0, "Confirming Alice's first account...\n")

	// -----------------------------------------------------------------------------------------
	// CONFIRM A THEORETICAL ACCT BY GIVING IT A REAL ACCT ID. (Alice's first "gold" account)
	//
	var strSmart9 = OT_API_SmartContract_ConfirmAccount(strSmartContract, MyNym, "party_alice",	// Should already be on the contract. (This way we can find it.)
														// ----------------------------------------
														"alice_first_acct",		// Acct name. Should already be added on the contract. (This way we can find it.)
														"agent_alice",			// The agent name for this asset account.
														strAliceFirstAcctID)	// AcctID for the asset account. (For alice_first_acct).
	strSmartContract = strSmart9
	// -----------------------------------------------------------------------------------------

	if (strSmartContract.size() > 0)
	{
		OT_API_Output(0, "\n\n\nAlice wants to use her \"gold\" (first) to buy some \"wheat\" (second) from Bob. (Or whatever the asset types are on the smartcontract template. They must match.)\n")
		OT_API_Output(0, "Paste Alice's SECOND asset ACCOUNT ID (Alice will RECEIVE to this account, from BOB). Default: [A6CcGwNiTtEPQnv7HLUcmf0QFaCGy862pb1SJ3zVqIU]: ")
		var strAliceSecondAcctID = OT_CLI_ReadLine()

		if (strAliceSecondAcctID.size() < 2)
		{
			strAliceSecondAcctID = "A6CcGwNiTtEPQnv7HLUcmf0QFaCGy862pb1SJ3zVqIU".to_string(); // My default "second account" for testing, from the test data.
		}
		// CONFIRM A THEORETICAL ACCT BY GIVING IT A REAL ACCT ID. (Alice's second "wheat" account)
		//
		OT_API_Output(0, "Confirming Alice's second account...\n")
		strSmart9 = OT_API_SmartContract_ConfirmAccount(strSmartContract, MyNym, "party_alice",	// Should already be on the contract. (This way we can find it.)
														// ----------------------------------------
														"alice_second_acct",	// Acct name. Should already be added on the contract. (This way we can find it.)
														"agent_alice",			// The agent name for this asset account.
														strAliceSecondAcctID)	// AcctID for the asset account. (For alice_second_acct).
		strSmartContract = strSmart9
		// --------------------------------------------------

// Debugging.
//print("SMART CONTRACT just confirmed alice_acct for party_alice. Output:\n\n\n")
//print(strSmartContract)
//print("\n\n\n Confirming party...")
		if (strSmartContract.size() > 0)
		{
			// --------------------------------------------------
			// CONFIRM A THEORETICAL PARTY BY GIVING IT A REAL NYM ID
			//
			OT_API_Output(0, "Confirming Alice as a PARTY to the smart contract...\n")
			var strSmart10 = OT_API_SmartContract_ConfirmParty(	strSmartContract,	// The smart contract, about to be changed by this function.
																"party_alice",		// The party should already be on the contract. This way we can find it.
																// ----------------------------------------
																MyNym)		// Nym ID for the party, the actual owner, 
																			// ===> AS WELL AS for the default AGENT of that party.
			strSmartContract = strSmart10
			// --------------------------------------------------
			
			if (strSmartContract.size() > 0)
			{
				bSuccess = true
			}
			else
			{
				OT_API_Output(0, "\n\n** Sorry -- Alice's ConfirmParty call FAILED!\n\n")
			}
		}
		else
		{
			OT_API_Output(0, "\n\n** Sorry -- Alice's second ConfirmAcct call FAILED!\n\n")
		}
	}
	else
	{
		OT_API_Output(0, "\n\n** Sorry -- Alice's first ConfirmAcct call FAILED!\n\n")
	}
	// --------------------------------------------------
}


// --------------------------


if (!bSuccess)
{
	// ******************************************************************

	// OTHERWISE, I take the transaction numbers BACK! (Also, if the activation failed,
	// I'd probably want to take the closing numbers back in that case as well.)
	
	OT_API_Output(0, "SMART CONTRACT: Since this script failed, I'm clawing BACK all the transaction numbers now (that way my data stays good.)\n")
	
    OT_API_Msg_HarvestTransactionNumbers(strSmartContract, MyNym, false, false, false, false, false) // Grab Alice's numbers back
//	OT_API_HarvestAllNumbers(Server, MyNym,	strSmartContract);
}

// SUCCESS!!!
else
{
	OT_API_Output(0, "\n\n")
	
	print(strSmartContract)
    
    return 1
}


0


/*
// ******************************************************************
// TRIGGER A CLAUSE REMOTELY (ON A SMART CONTRACT THAT'S ALREADY BEEN ACTIVATED.)
//
// OT_API_triggerClause(Server, MyNym, const char * TRANSACTION_NUMBER, "typical_clause");

*/





















