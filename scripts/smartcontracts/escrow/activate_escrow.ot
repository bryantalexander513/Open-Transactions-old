#!/usr/bin/env ot



def details_activate_smart_contract(strContract, strAgent)
{
    // --------------------------------------------------------------------
    // Instantiate the "OT Made Easy" object.
    //
    var madeEasy	= OT_ME()
    
    // ***************************************************************
    
    // HERE, WE SEND THE ACTIVATION REQUEST TO THE SERVER
    //
    var strResponse = madeEasy.activate_smart_contract(Server, MyNym, MyAcct, strAgent, strContract) 
    var strAttempt  = "activate_smart_contract"
    
    // ***************************************************************
    
    // HERE, WE INTERPRET THE SERVER REPLY, WHETHER SUCCESS, FAIL, OR ERROR...
    
    var nInterpretReply = InterpretTransactionMsgReply(Server, MyNym, MyAcct, strAttempt, strResponse)
    
    if (1 == nInterpretReply)
    {    
        // Download all the intermediary files (account balance, inbox, outbox, etc)
        // since they have probably changed from this operation.
        //        
        OT_API_Output(0, "Server response ("+strAttempt+"): SUCCESS!\n")
    }
    
    // ***************************************************************
    //
    // Return status to caller.
    //
    return nInterpretReply  
}





// This temp variable is used for a running "latest copy" of the smart contract, as we 
// construct it here inside this client-side OT script. (Don't confuse the server-side
// scripts, aka the smart contracts, with the client-side scripts :-)
//
var strSmartContract = ""

OT_API_Output(0, "\n\n\nThis script assumes you have already used sign_escrow_as_alice.ot, sign_escrow_as_bob.ot, and sign_escrow_as_judy.ot \n")
OT_API_Output(0, "To ACTIVATE the smart contract on the OT Server, paste or pipe the smart contract,\nfollowed by a ~ on a line by itself. \n")

strSmartContract = OT_CLI_ReadUntilEOF()

// ***************************************************************
//
// ...WE ACTIVATE THE SMART CONTRACT!
//
print("SMART CONTRACT:  Final version before activation:\n\n\n")
print(strSmartContract)
print("\n\n\n Activating...")


// --------------------------------------------------
// ACTIVATE THE SMART CONTRACT ON A SERVER.


// This is the return value.
//
details_activate_smart_contract(strSmartContract, "agent_alice")





//OT_API_FlushMessageBuffer()
//OT_API_activateSmartContract(Server, MyNym, strSmartContract)
//var strMessage = OT_API_PopMessageBuffer()
//
//print("Finishing calling activate!!")
//
//var bMsgSuccess  = OT_API_Message_GetSuccess(strMessage)
//var bBlncSuccess = OT_API_Msg_GetBlnceAgrmntSuccess(Server, MyNym, MyAcct, strMessage)
//var bTranSuccess = OT_API_Msg_GetTransactionSuccess(Server, MyNym, MyAcct, strMessage)		
//		
//if ((!bMsgSuccess) || (!bBlncSuccess) || (!bTranSuccess))
//{
//    
//    // TODO:  EACH signer, should store a copy of the smart contract in his record box, until
//    // he receives an activation notice (also in record box) or until he chooses to discard the
//    // smart contract and harvest the numbers.
//    // This way, for example, if Alice activates the contract, and it is rejected, then Bob and
//    // Judy can get notices and harvest their own numbers (without having to hear from Alice, in
//    // order to do so.)
//    // And until Alice DOES activate it, Bob and Judy could also discard/harvest those numbers and
//    // use them elsewhere, causing the smart contract activation to fail (whenever it is finally attempted.)
//    //
//    // QUESTION: But what if Bob/Judy want to cancel those numbers WITHOUT using them on a transaction?
//    // ANSWER: There will have to be a "cancel number" transaction which does nothing but burn the number.
//    // (This would also cause the smart contract activation to fail, whenever that finally occurs.)
//    
//    
//	// OTHERWISE, I take the transaction numbers BACK! (Also, if the activation failed,
//	// I'd probably want to take the closing numbers back in that case as well.)
////	print("SMART CONTRACT: Failed somehow, so I'm clawing all the numbers BACK now (that way my data stays good.)")
////	
////    OT_API_Msg_HarvestTransactionNumbers(strSmartContract, MyNym,  false, false, false, false, false) // Grab Alice's numbers back
////    OT_API_Msg_HarvestTransactionNumbers(strSmartContract, HisNym, false, false, false, false, false) // Grab Bob's numbers back
//
////	OT_API_HarvestClosingNumbers(Server, MyNym,		strSmartContract);
////	OT_API_HarvestClosingNumbers(Server, HisNym,	strSmartContract);
//}


/*
// ******************************************************************
// TRIGGER A CLAUSE REMOTELY (ON A SMART CONTRACT THAT'S ALREADY BEEN ACTIVATED.)
//
// OT_API_triggerClause(Server, MyNym, const char * TRANSACTION_NUMBER, "typical_clause");

*/





















